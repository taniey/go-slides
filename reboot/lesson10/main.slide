Lesson7
Monkey by 51reboot

zhengyscn@gmail.com
http://github.com/zhengyscn

* 大纲
.background imgs/bg.png

- 回顾
- Django(hello world版本)
- Django对象
- 模版
- Django admin
- User admin
- Q&A



* Django(hello world版本)
.background imgs/bg.png

- 介绍
- 安装
- 创建项目及项目目录结构
- 启动服务
- 创建应用及应用目录结构
- Hello World



* 介绍
.background imgs/bg.png

.link https://baike.baidu.com/item/django/61531 Django 百度百科

.link https://docs.djangoproject.com/en/1.11/ Django 1.11 英文

.link https://yiyibooks.cn/xx/Django_1.11.6/index.html Django 1.11 中文


* 安装

    $ pip install django==1.11

* 创建项目及项目目录结构
.background imgs/bg.png
    (xly1) bash-3.2$ django-admin.py startproject ops
    (xly1) bash-3.2$ ls
    ops
    (xly1) bash-3.2$ tree
    .
    └── ops                     // 项目目录
        ├── manage.py           // 命令行管理工具
        └── ops
            ├── __init__.py     // 包管理文件
            ├── settings.py     // 项目配置文件
            ├── urls.py         // url配置文件
            └── wsgi.py         // Web服务器的网关接口（webserver getway interface）

    2 directories, 5 files


* 启动服务
.background imgs/bg.png
    (xly1) bash-3.2$ cd ops
    (xly1) bash-3.2$ python manage.py runserver
    (xly1) bash-3.2$ python manage.py runserver 0.0.0.0:8000


* 创建应用及应用目录结构
.background imgs/bg.png
    (xly1) bash-3.2$ django-admin.py startapp dashboard
    (xly1) bash-3.2$ tree .
    .
    ├── dashboard            // 应用目录
    │   ├── __init__.py     // 包文件
    │   ├── admin.py        // admin后台文件
    │   ├── apps.py
    │   ├── migrations      // 数据库文件
    │   │   └── __init__.py
    │   ├── models.py       // 表
    │   ├── tests.py        // 单元测试
    │   └── views.py        // 视图
    ├── db.sqlite3
    ├── manage.py
    └── ops
        ├── __init__.py
        ├── settings.py
        ├── urls.py
        └── wsgi.py

    3 directories, 13 files

* Hello World
.background imgs/bg.png
    $ vim dashboard/views.py    // 编写视图
    from django.http import HttpResponse
    def hello(request):
        return HttpResponse("hello world.")

    $ vim ops/settings.py       // 新创建的app添加到配置文件中
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'dashboard',    // 新增一行
    ]

    $ vim ops/urls.py           // 新增url路由
    from dashboard.views import hello

    urlpatterns = [
        url(r'^admin/', admin.site.urls),
        url(r'^dashboard/', hello), // 新增一行
    ]


* Django对象
.background imgs/bg.png
- HttpReques对象
    $ vim dashboard/views.py
    def hello(request):
        print("request: ", request)
        print("dir(request): ", dir(request))   // 打印常用的request方法
        return HttpResponse("hello world.")

- HttpResponse对象
    # 传递一个字符串作为页面的内容到 HttpResponse 构造函数
    def __init__(self, content_type=None, status=None, reason=None, charset=None):
        pass

    content_type: application/json | text/plain
    status: 200

- JsonResponse对象
    class JsonResponse(HttpResponse):
        def __init__(self, data, encoder=DjangoJSONEncoder, safe=True,
                        json_dumps_params=None, **kwargs):


* 示例
.background imgs/bg.png
    def hello(request):
        print("request: ", request)
        print("dir(request): ", dir(request))
        return HttpResponse("hello world.")

    def helloJson(request):
        dic = {
            'name' : '51reboot',
            'address' : 'beijing',
        }
        content = json.dump(dic)
        return HttpResponse(content, content_type="application/json")
        # return JsonResponse(dic)

    def helloDic(request):
        dic = list(range(10))
        return JsonResponse(dic, safe=False)


* QueryDict对象

    在 HttpRequest 对象中，GET 和 POST 属性得到的都是 django.http.QueryDict 所创建的实例。
    这是一个 django 自定义的类似字典的类，用来处理同一个键带多个值的情况。

    在 python 原始字典中，当一个键出现多个值的时候会发生冲突，只保留最后一个值。
    而在 HTTL 表单中，通常会发生一个键有多个值的情况，例如 <select multiple> （多选框）就是一个很常见的情况。

    request.POST 和 request.GET 的 QueryDict 在一个正常的请求/响应过程中是不可变的。
    若要获得可变的版本，需要使用 copy() 方法。

    参考：
    https://www.jianshu.com/p/be25373eb5eb


* 练习
.background imgs/bg.png
- 传递请求参数，求和
    Method： Get
    Uri: /sum?arg1=2&arg2=3
    Response: 5

- 执行命令，返回命令执行结果
    Method： Get
    Uri: /command?cmd=df
    Response: 5


* 模版
.background imgs/bg.png

- render
    return render(request, "login.html", context={"username" : "xxx"})

    # 注意， 参数类型
    第一个参数是request
    第二个参数是静态html文件
    第三个参数是后端传递给html文件的参数

* Django admin
.background imgs/bg.png

- 创建超级用户/修改密码

- 配置Django数据库

- 同步数据库

- User Models

- 配置admin

- admin后台

* 创建超级用户/修改密码
.background imgs/bg.png

- 切换到项目目录
    $ cd ops

- 创建用户
    $ python manage.py createsuperuser
    or
    $ python manage.py createsuperuser --username=monkey1 --email=monkey1@51reboot.com

- 修改密码
    $ python manage.py changepassword monkey


* 配置Django数据库
    $ vim ops/settings.py   # 默认是sqlite3数据库， 切换到mysql数据库

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'ops',
            'USER': '51reboot',
            'PASSWORD': '',
            'HOST': '127.0.0.1',
            'PORT': '3306',
        },
    }


* User Models
.background imgs/bg.png

    class Users(models.Model):
        username    =   models.CharField(max_length=32, unique=True, verbose_name="用户名")
        age         =   models.IntegerField(verbose_name="年龄")
        phone       =   models.CharField(max_length=11, unique=True, verbose_name="手机号")
        address     =   models.TextField(blank=True, verbose_name="地址")
        # create_time and update_time只读的， 不允许admin修改.
        create_time =   models.DateTimeField(auto_now_add=True, verbose_name="创建时间")
        update_time =   models.DateTimeField(auto_now=True, verbose_name="更新时间")

        class Meta:
            db_table = "users"
            verbose_name = '用户表'
            verbose_name_plural = '用户表'
            ordering = ['update_time', ]

        def __str__(self):
            return self.username


* 同步数据库
    // 查看现有的迁移文件的状态，是否同步到数据库中
    $ python manage.py showmigrations

    //打印迁移文件内容
    $ python manage.py sqlmigrate sessions 0001_initial

    // 同步models到数本地据库文件
    $ python manage.py makemigrations

    // 同步数据库文件里的sql预计到数据库执行
    $ python manage.py migrate

    // 直接连接上关联的数据库
    $ python manage.py dbshell

* 配置admin
.background imgs/bg.png
    from .models import Users

    class UsersAdmin(admin.ModelAdmin):
        # listdisplay设置要显示在列表中的字段（id字段是Django模型的默认主键）
        list_display = ['username', 'age', 'phone', 'address', 'create_time', 'update_time']

        # 搜索字段
        search_fields = ['username', 'phone']

        # 过滤字段
        list_filter = ['username', 'phone']

        # ordering设置默认排序字段，负号表示降序排序
        ordering = ['-update_time', 'create_time']

        # list_per_page设置每页显示多少条记录，默认是100条
        list_per_page = 2

    admin.site.register(Users, UsersAdmin)

    # 不需要同步数据库，重启立即生效.

* admin后台

    http://localhost:8000/admin










* Q&A
.background imgs/bg.png

.image imgs/qa.png

.caption _zhengyscn_ by [[https://www.51reboot.com/][51reboot]]
